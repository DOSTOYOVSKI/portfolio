{
  "version": 3,
  "sources": ["../../mdast-util-to-string/lib/index.js"],
  "sourcesContent": ["/**\r\n * @typedef {import('mdast').Nodes} Nodes\r\n *\r\n * @typedef Options\r\n *   Configuration (optional).\r\n * @property {boolean | null | undefined} [includeImageAlt=true]\r\n *   Whether to use `alt` for `image`s (default: `true`).\r\n * @property {boolean | null | undefined} [includeHtml=true]\r\n *   Whether to use `value` of HTML (default: `true`).\r\n */\r\n\r\n/** @type {Options} */\r\nconst emptyOptions = {}\r\n\r\n/**\r\n * Get the text content of a node or list of nodes.\r\n *\r\n * Prefers the nodeâ€™s plain-text fields, otherwise serializes its children,\r\n * and if the given value is an array, serialize the nodes in it.\r\n *\r\n * @param {unknown} [value]\r\n *   Thing to serialize, typically `Node`.\r\n * @param {Options | null | undefined} [options]\r\n *   Configuration (optional).\r\n * @returns {string}\r\n *   Serialized `value`.\r\n */\r\nexport function toString(value, options) {\r\n  const settings = options || emptyOptions\r\n  const includeImageAlt =\r\n    typeof settings.includeImageAlt === 'boolean'\r\n      ? settings.includeImageAlt\r\n      : true\r\n  const includeHtml =\r\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\r\n\r\n  return one(value, includeImageAlt, includeHtml)\r\n}\r\n\r\n/**\r\n * One node or several nodes.\r\n *\r\n * @param {unknown} value\r\n *   Thing to serialize.\r\n * @param {boolean} includeImageAlt\r\n *   Include image `alt`s.\r\n * @param {boolean} includeHtml\r\n *   Include HTML.\r\n * @returns {string}\r\n *   Serialized node.\r\n */\r\nfunction one(value, includeImageAlt, includeHtml) {\r\n  if (node(value)) {\r\n    if ('value' in value) {\r\n      return value.type === 'html' && !includeHtml ? '' : value.value\r\n    }\r\n\r\n    if (includeImageAlt && 'alt' in value && value.alt) {\r\n      return value.alt\r\n    }\r\n\r\n    if ('children' in value) {\r\n      return all(value.children, includeImageAlt, includeHtml)\r\n    }\r\n  }\r\n\r\n  if (Array.isArray(value)) {\r\n    return all(value, includeImageAlt, includeHtml)\r\n  }\r\n\r\n  return ''\r\n}\r\n\r\n/**\r\n * Serialize a list of nodes.\r\n *\r\n * @param {Array<unknown>} values\r\n *   Thing to serialize.\r\n * @param {boolean} includeImageAlt\r\n *   Include image `alt`s.\r\n * @param {boolean} includeHtml\r\n *   Include HTML.\r\n * @returns {string}\r\n *   Serialized nodes.\r\n */\r\nfunction all(values, includeImageAlt, includeHtml) {\r\n  /** @type {Array<string>} */\r\n  const result = []\r\n  let index = -1\r\n\r\n  while (++index < values.length) {\r\n    result[index] = one(values[index], includeImageAlt, includeHtml)\r\n  }\r\n\r\n  return result.join('')\r\n}\r\n\r\n/**\r\n * Check if `value` looks like a node.\r\n *\r\n * @param {unknown} value\r\n *   Thing.\r\n * @returns {value is Nodes}\r\n *   Whether `value` is a node.\r\n */\r\nfunction node(value) {\r\n  return Boolean(value && typeof value === 'object')\r\n}\r\n"],
  "mappings": ";;;AAYA,IAAM,eAAe,CAAC;AAef,SAAS,SAAS,OAAO,SAAS;AACvC,QAAM,WAAW,WAAW;AAC5B,QAAM,kBACJ,OAAO,SAAS,oBAAoB,YAChC,SAAS,kBACT;AACN,QAAM,cACJ,OAAO,SAAS,gBAAgB,YAAY,SAAS,cAAc;AAErE,SAAO,IAAI,OAAO,iBAAiB,WAAW;AAChD;AAcA,SAAS,IAAI,OAAO,iBAAiB,aAAa;AAChD,MAAI,KAAK,KAAK,GAAG;AACf,QAAI,WAAW,OAAO;AACpB,aAAO,MAAM,SAAS,UAAU,CAAC,cAAc,KAAK,MAAM;AAAA,IAC5D;AAEA,QAAI,mBAAmB,SAAS,SAAS,MAAM,KAAK;AAClD,aAAO,MAAM;AAAA,IACf;AAEA,QAAI,cAAc,OAAO;AACvB,aAAO,IAAI,MAAM,UAAU,iBAAiB,WAAW;AAAA,IACzD;AAAA,EACF;AAEA,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,WAAO,IAAI,OAAO,iBAAiB,WAAW;AAAA,EAChD;AAEA,SAAO;AACT;AAcA,SAAS,IAAI,QAAQ,iBAAiB,aAAa;AAEjD,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ;AAEZ,SAAO,EAAE,QAAQ,OAAO,QAAQ;AAC9B,WAAO,KAAK,IAAI,IAAI,OAAO,KAAK,GAAG,iBAAiB,WAAW;AAAA,EACjE;AAEA,SAAO,OAAO,KAAK,EAAE;AACvB;AAUA,SAAS,KAAK,OAAO;AACnB,SAAO,QAAQ,SAAS,OAAO,UAAU,QAAQ;AACnD;",
  "names": []
}
