{
  "version": 3,
  "sources": ["../../unpic/esm/data/domains.js", "../../unpic/esm/data/subdomains.js", "../../unpic/esm/data/paths.js", "../../unpic/esm/src/utils.js", "../../unpic/esm/src/detect.js", "../../unpic/esm/src/transformers/contentful.js", "../../unpic/esm/src/transformers/builder.io.js", "../../unpic/esm/src/transformers/imgix.js", "../../unpic/esm/src/transformers/shopify.js", "../../unpic/esm/src/transformers/wordpress.js", "../../unpic/esm/src/transformers/cloudimage.js", "../../unpic/esm/src/transformers/cloudinary.js", "../../unpic/esm/src/transformers/cloudflare.js", "../../unpic/esm/src/transformers/bunny.js", "../../unpic/esm/src/transformers/storyblok.js", "../../unpic/esm/src/transformers/kontent.ai.js", "../../unpic/esm/src/transformers/vercel.js", "../../unpic/esm/src/transformers/nextjs.js", "../../unpic/esm/src/transformers/scene7.js", "../../unpic/esm/src/transformers/keycdn.js", "../../unpic/esm/src/transformers/directus.js", "../../unpic/esm/src/transformers/imageengine.js", "../../unpic/esm/src/transformers/contentstack.js", "../../unpic/esm/src/transformers/cloudflare_images.js", "../../unpic/esm/src/transformers/ipx.js", "../../unpic/esm/src/transformers/astro.js", "../../unpic/esm/src/transformers/netlify.js", "../../unpic/esm/src/transformers/imagekit.js", "../../unpic/esm/src/transformers/uploadcare.js", "../../unpic/esm/src/transformers/supabase.js", "../../unpic/esm/src/canonical.js", "../../unpic/esm/src/transform.js", "../../unpic/esm/src/parse.js"],
  "sourcesContent": ["export default {\r\n    \"images.ctfassets.net\": \"contentful\",\r\n    \"cdn.builder.io\": \"builder.io\",\r\n    \"images.prismic.io\": \"imgix\",\r\n    \"www.datocms-assets.com\": \"imgix\",\r\n    \"cdn.sanity.io\": \"imgix\",\r\n    \"images.unsplash.com\": \"imgix\",\r\n    \"cdn.shopify.com\": \"shopify\",\r\n    \"s7d1.scene7.com\": \"scene7\",\r\n    \"ip.keycdn.com\": \"keycdn\",\r\n    \"assets.caisy.io\": \"bunny\",\r\n    \"images.contentstack.io\": \"contentstack\",\r\n    \"ucarecdn.com\": \"uploadcare\"\r\n};\r\n", "export default {\r\n    \"imgix.net\": \"imgix\",\r\n    \"files.wordpress.com\": \"wordpress\",\r\n    \"b-cdn.net\": \"bunny\",\r\n    \"storyblok.com\": \"storyblok\",\r\n    \"kc-usercontent.com\": \"kontent.ai\",\r\n    \"cloudinary.com\": \"cloudinary\",\r\n    \"kxcdn.com\": \"keycdn\",\r\n    \"imgeng.in\": \"imageengine\",\r\n    \"imagekit.io\": \"imagekit\",\r\n    \"cloudimg.io\": \"cloudimage\",\r\n    \"ucarecdn.com\": \"uploadcare\",\r\n    \"supabase.co\": \"supabase\"\r\n};\r\n", "export default {\r\n    \"/cdn-cgi/image/\": \"cloudflare\",\r\n    \"/cdn-cgi/imagedelivery/\": \"cloudflare_images\",\r\n    \"/_next/image\": \"nextjs\",\r\n    \"/_next/static\": \"nextjs\",\r\n    \"/_vercel/image\": \"vercel\",\r\n    \"/is/image\": \"scene7\",\r\n    \"/_ipx/\": \"ipx\",\r\n    \"/_image\": \"astro\",\r\n    \"/.netlify/images\": \"netlify\",\r\n    \"/storage/v1/object/public/\": \"supabase\",\r\n    \"/storage/v1/render/image/public/\": \"supabase\"\r\n};\r\n", "export const roundIfNumeric = (value) => {\r\n    if (!value) {\r\n        return value;\r\n    }\r\n    const num = Number(value);\r\n    return isNaN(num) ? value : Math.round(num);\r\n};\r\nexport const setParamIfDefined = (url, key, value, deleteExisting, roundValue) => {\r\n    if (value) {\r\n        if (roundValue) {\r\n            value = roundIfNumeric(value);\r\n        }\r\n        url.searchParams.set(key, value.toString());\r\n    }\r\n    else if (deleteExisting) {\r\n        url.searchParams.delete(key);\r\n    }\r\n};\r\nexport const setParamIfUndefined = (url, key, value) => {\r\n    if (!url.searchParams.has(key)) {\r\n        url.searchParams.set(key, value.toString());\r\n    }\r\n};\r\nexport const getNumericParam = (url, key) => {\r\n    const value = Number(url.searchParams.get(key));\r\n    return isNaN(value) ? undefined : value;\r\n};\r\n/**\r\n * Given a URL object, returns path and query params\r\n */\r\nexport const toRelativeUrl = (url) => {\r\n    const { pathname, search } = url;\r\n    return `${pathname}${search}`;\r\n};\r\n/**\r\n * Returns a URL string that may be relative or absolute\r\n */\r\nexport const toCanonicalUrlString = (url) => {\r\n    return url.hostname === \"n\" ? toRelativeUrl(url) : url.toString();\r\n};\r\n/**\r\n * Normalises a URL object or string URL to a URL object.\r\n */\r\nexport const toUrl = (url, base) => {\r\n    return typeof url === \"string\" ? new URL(url, base ?? \"http://n/\") : url;\r\n};\r\n", "import domains from \"../data/domains.js\";\r\nimport subdomains from \"../data/subdomains.js\";\r\nimport paths from \"../data/paths.js\";\r\nimport { toUrl } from \"./utils.js\";\r\nconst cdnDomains = new Map(Object.entries(domains));\r\nconst cdnSubdomains = Object.entries(subdomains);\r\nexport function getImageCdnForUrl(url) {\r\n    return getImageCdnForUrlByDomain(url) || getImageCdnForUrlByPath(url);\r\n}\r\nexport function getImageCdnForUrlByDomain(url) {\r\n    if (typeof url === \"string\" && !url.startsWith(\"https://\")) {\r\n        return false;\r\n    }\r\n    const { hostname } = toUrl(url);\r\n    if (cdnDomains.has(hostname)) {\r\n        return cdnDomains.get(hostname);\r\n    }\r\n    for (const [subdomain, cdn] of cdnSubdomains) {\r\n        if (hostname.endsWith(`.${subdomain}`)) {\r\n            return cdn;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nexport function getImageCdnForUrlByPath(url) {\r\n    // Allow relative URLs\r\n    const { pathname } = toUrl(url);\r\n    for (const [prefix, cdn] of Object.entries(paths)) {\r\n        if (pathname.startsWith(prefix)) {\r\n            return cdn;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n", "import { getNumericParam, setParamIfDefined, setParamIfUndefined, toUrl, } from \"../utils.js\";\r\nexport const parse = (url) => {\r\n    const parsedUrl = toUrl(url);\r\n    const fit = parsedUrl.searchParams.get(\"fit\") || undefined;\r\n    const width = getNumericParam(parsedUrl, \"w\");\r\n    const height = getNumericParam(parsedUrl, \"h\");\r\n    const quality = getNumericParam(parsedUrl, \"q\");\r\n    const format = parsedUrl.searchParams.get(\"fm\") || undefined;\r\n    parsedUrl.search = \"\";\r\n    return {\r\n        width,\r\n        height,\r\n        format,\r\n        base: parsedUrl.toString(),\r\n        params: { fit, quality },\r\n        cdn: \"contentful\",\r\n    };\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const url = toUrl(originalUrl);\r\n    if (width && width > 4000) {\r\n        if (height) {\r\n            height = Math.round(height * 4000 / width);\r\n        }\r\n        width = 4000;\r\n    }\r\n    if (height && height > 4000) {\r\n        if (width) {\r\n            width = Math.round(width * 4000 / height);\r\n        }\r\n        height = 4000;\r\n    }\r\n    setParamIfDefined(url, \"w\", width, true, true);\r\n    setParamIfDefined(url, \"h\", height, true, true);\r\n    setParamIfDefined(url, \"fm\", format);\r\n    setParamIfUndefined(url, \"fit\", \"fill\");\r\n    return url;\r\n};\r\n", "import { getNumericParam, setParamIfDefined, setParamIfUndefined, toUrl, } from \"../utils.js\";\r\nexport const parse = (url) => {\r\n    const parsedUrl = toUrl(url);\r\n    const width = getNumericParam(parsedUrl, \"width\");\r\n    const height = getNumericParam(parsedUrl, \"height\");\r\n    const quality = getNumericParam(parsedUrl, \"quality\");\r\n    const format = parsedUrl.searchParams.get(\"format\") || undefined;\r\n    const fit = parsedUrl.searchParams.get(\"fit\") || undefined;\r\n    parsedUrl.search = \"\";\r\n    return {\r\n        width,\r\n        height,\r\n        format,\r\n        base: parsedUrl.toString(),\r\n        params: { quality, fit },\r\n        cdn: \"builder.io\",\r\n    };\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const url = toUrl(originalUrl);\r\n    setParamIfDefined(url, \"width\", width, true, true);\r\n    setParamIfDefined(url, \"height\", height, true, true);\r\n    setParamIfDefined(url, \"format\", format);\r\n    if (width && height) {\r\n        setParamIfUndefined(url, \"fit\", \"cover\");\r\n        setParamIfUndefined(url, \"sharp\", \"true\");\r\n    }\r\n    return url;\r\n};\r\n", "import { setParamIfDefined, setParamIfUndefined, toUrl } from \"../utils.js\";\r\nexport const parse = (url) => {\r\n    const parsed = toUrl(url);\r\n    const width = Number(parsed.searchParams.get(\"w\")) || undefined;\r\n    const height = Number(parsed.searchParams.get(\"h\")) || undefined;\r\n    const quality = Number(parsed.searchParams.get(\"q\")) || undefined;\r\n    const format = parsed.searchParams.get(\"fm\") || undefined;\r\n    const params = {};\r\n    parsed.searchParams.forEach((value, key) => {\r\n        params[key] = value;\r\n    });\r\n    parsed.search = \"\";\r\n    return {\r\n        base: parsed.toString(),\r\n        width,\r\n        height,\r\n        quality,\r\n        format,\r\n        params,\r\n        cdn: \"imgix\",\r\n    };\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const url = toUrl(originalUrl);\r\n    setParamIfDefined(url, \"w\", width, true, true);\r\n    setParamIfDefined(url, \"h\", height, true, true);\r\n    setParamIfUndefined(url, \"fit\", \"min\");\r\n    if (format) {\r\n        url.searchParams.set(\"fm\", format);\r\n        const fm = url.searchParams.get(\"auto\");\r\n        if (fm === \"format\") {\r\n            url.searchParams.delete(\"auto\");\r\n        }\r\n        else if (fm?.includes(\"format\")) {\r\n            url.searchParams.set(\"auto\", fm.split(\",\").filter((s) => s !== \"format\").join(\",\"));\r\n        }\r\n    }\r\n    else {\r\n        url.searchParams.delete(\"fm\");\r\n        if (!url.searchParams.get(\"auto\")?.includes(\"format\")) {\r\n            url.searchParams.append(\"auto\", \"format\");\r\n        }\r\n    }\r\n    return url;\r\n};\r\n", "import { setParamIfDefined, toUrl } from \"../utils.js\";\r\nconst shopifyRegex = /(.+?)(?:_(?:(pico|icon|thumb|small|compact|medium|large|grande|original|master)|(\\d*)x(\\d*)))?(?:_crop_([a-z]+))?(\\.[a-zA-Z]+)(\\.png|\\.jpg|\\.webp|\\.avif)?$/;\r\nexport const parse = (imageUrl) => {\r\n    const url = toUrl(imageUrl);\r\n    const match = url.pathname.match(shopifyRegex);\r\n    if (!match) {\r\n        throw new Error(\"Invalid Shopify URL\");\r\n    }\r\n    const [, path, size, width, height, crop, extension, format] = match;\r\n    url.pathname = `${path}${extension}`;\r\n    const widthString = width ? width : url.searchParams.get(\"width\");\r\n    const heightString = height ? height : url.searchParams.get(\"height\");\r\n    url.searchParams.delete(\"width\");\r\n    url.searchParams.delete(\"height\");\r\n    return {\r\n        base: url.toString(),\r\n        width: Number(widthString) || undefined,\r\n        height: Number(heightString) || undefined,\r\n        format: format ? format.slice(1) : undefined,\r\n        params: { crop, size },\r\n        cdn: \"shopify\",\r\n    };\r\n};\r\nexport const generate = ({ base, width, height, format, params }) => {\r\n    const url = toUrl(base);\r\n    setParamIfDefined(url, \"width\", width, true, true);\r\n    setParamIfDefined(url, \"height\", height, true, true);\r\n    setParamIfDefined(url, \"crop\", params?.crop);\r\n    setParamIfDefined(url, \"format\", format);\r\n    return url;\r\n};\r\nexport const transform = ({ url: originalUrl, width, height }) => {\r\n    const parsed = parse(originalUrl);\r\n    if (!parsed) {\r\n        return;\r\n    }\r\n    const props = {\r\n        ...parsed,\r\n        width,\r\n        height,\r\n    };\r\n    return generate(props);\r\n};\r\n", "import { getNumericParam, setParamIfDefined, setParamIfUndefined, toUrl, } from \"../utils.js\";\r\nexport const transform = ({ url: originalUrl, width, height }) => {\r\n    const url = toUrl(originalUrl);\r\n    setParamIfDefined(url, \"w\", width, true, true);\r\n    setParamIfDefined(url, \"h\", height, true, true);\r\n    setParamIfUndefined(url, \"crop\", \"1\");\r\n    return url;\r\n};\r\nexport const parse = (url) => {\r\n    const parsed = toUrl(url);\r\n    const width = getNumericParam(parsed, \"w\");\r\n    const height = getNumericParam(parsed, \"h\");\r\n    const crop = parsed.searchParams.get(\"crop\") === \"1\";\r\n    parsed.search = \"\";\r\n    return {\r\n        base: parsed.toString(),\r\n        width,\r\n        height,\r\n        params: { crop },\r\n        cdn: \"wordpress\",\r\n    };\r\n};\r\n", "import { getNumericParam, setParamIfDefined, toUrl } from \"../utils.js\";\r\nexport const parse = (url) => {\r\n    const parsedUrl = toUrl(url);\r\n    const width = getNumericParam(parsedUrl, \"w\") || undefined;\r\n    const height = getNumericParam(parsedUrl, \"h\") || undefined;\r\n    const quality = getNumericParam(parsedUrl, \"q\") || undefined;\r\n    parsedUrl.search = \"\";\r\n    return {\r\n        width,\r\n        height,\r\n        base: parsedUrl.toString(),\r\n        params: {\r\n            quality,\r\n        },\r\n        cdn: \"cloudimage\",\r\n    };\r\n};\r\nexport const transform = ({ url: originalUrl, width, height }) => {\r\n    const url = toUrl(originalUrl);\r\n    setParamIfDefined(url, \"w\", width, true, true);\r\n    setParamIfDefined(url, \"h\", height, true, true);\r\n    setParamIfDefined(url, \"q\", getNumericParam(url, \"q\"), true);\r\n    return url;\r\n};\r\n", "import { roundIfNumeric, toUrl } from \"../utils.js\";\r\n// Thanks Colby!\r\nconst cloudinaryRegex = /https?:\\/\\/(?<host>[^\\/]+)\\/(?<cloudName>[^\\/]+)\\/(?<assetType>image|video|raw)\\/(?<deliveryType>upload|fetch|private|authenticated|sprite|facebook|twitter|youtube|vimeo)\\/?(?<signature>s\\-\\-[a-zA-Z0-9]+\\-\\-)?\\/?(?<transformations>(?:[^_\\/]+_[^,\\/]+,?)*)?\\/(?:(?<version>v\\d+)\\/)?(?<idAndFormat>[^\\s]+)$/g;\r\nconst parseTransforms = (transformations) => {\r\n    return transformations\r\n        ? Object.fromEntries(transformations.split(\",\").map((t) => t.split(\"_\")))\r\n        : {};\r\n};\r\nconst formatUrl = ({ host, cloudName, assetType, deliveryType, signature, transformations = {}, version, id, format, }) => {\r\n    if (format) {\r\n        transformations.f = format;\r\n    }\r\n    const transformString = Object.entries(transformations).map(([key, value]) => `${key}_${value}`).join(\",\");\r\n    const pathSegments = [\r\n        host,\r\n        cloudName,\r\n        assetType,\r\n        deliveryType,\r\n        signature,\r\n        transformString,\r\n        version,\r\n        id,\r\n    ].filter(Boolean).join(\"/\");\r\n    return `https://${pathSegments}`;\r\n};\r\nexport const parse = (imageUrl) => {\r\n    const url = toUrl(imageUrl);\r\n    const matches = [...url.toString().matchAll(cloudinaryRegex)];\r\n    if (!matches.length) {\r\n        throw new Error(\"Invalid Cloudinary URL\");\r\n    }\r\n    const group = matches[0].groups || {};\r\n    const { transformations: transformString = \"\", idAndFormat, ...baseParams } = group;\r\n    delete group.idAndFormat;\r\n    const lastDotIndex = idAndFormat.lastIndexOf(\".\");\r\n    const id = lastDotIndex < 0\r\n        ? idAndFormat\r\n        : idAndFormat.slice(0, lastDotIndex);\r\n    const originalFormat = lastDotIndex < 0\r\n        ? undefined\r\n        : idAndFormat.slice(lastDotIndex + 1);\r\n    const { w, h, f, ...transformations } = parseTransforms(transformString);\r\n    const format = (f && f !== \"auto\") ? f : originalFormat;\r\n    const base = formatUrl({ ...baseParams, id, transformations });\r\n    return {\r\n        base,\r\n        width: Number(w) || undefined,\r\n        height: Number(h) || undefined,\r\n        format,\r\n        cdn: \"cloudinary\",\r\n        params: {\r\n            ...group,\r\n            id: group.deliveryType === \"fetch\" ? idAndFormat : id,\r\n            format,\r\n            transformations,\r\n        },\r\n    };\r\n};\r\nexport const generate = ({ base, width, height, format, params }) => {\r\n    const parsed = parse(base.toString());\r\n    const props = {\r\n        transformations: {},\r\n        ...parsed.params,\r\n        ...params,\r\n        format: format || \"auto\",\r\n    };\r\n    if (width) {\r\n        props.transformations.w = roundIfNumeric(width).toString();\r\n    }\r\n    if (height) {\r\n        props.transformations.h = roundIfNumeric(height).toString();\r\n    }\r\n    // Default crop to fill without upscaling\r\n    props.transformations.c ||= \"lfill\";\r\n    return formatUrl(props);\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format = \"auto\" }) => {\r\n    const parsed = parse(originalUrl);\r\n    if (!parsed) {\r\n        throw new Error(\"Invalid Cloudinary URL\");\r\n    }\r\n    if (parsed.params?.assetType !== \"image\") {\r\n        throw new Error(\"Cloudinary transformer only supports images\");\r\n    }\r\n    if (parsed.params?.signature) {\r\n        throw new Error(\"Cloudinary transformer does not support signed URLs\");\r\n    }\r\n    const props = {\r\n        ...parsed,\r\n        width,\r\n        height,\r\n        format,\r\n    };\r\n    return generate(props);\r\n};\r\n", "import { toUrl } from \"../utils.js\";\r\nconst cloudflareRegex = /https?:\\/\\/(?<host>[^\\/]+)\\/cdn-cgi\\/image\\/(?<transformations>[^\\/]+)?\\/(?<path>.*)$/g;\r\nconst parseTransforms = (transformations) => Object.fromEntries(transformations.split(\",\").map((t) => t.split(\"=\")));\r\nconst formatUrl = ({ host, transformations = {}, path, }) => {\r\n    const transformString = Object.entries(transformations).map(([key, value]) => `${key}=${value}`).join(\",\");\r\n    const pathSegments = [\r\n        host,\r\n        \"cdn-cgi\",\r\n        \"image\",\r\n        transformString,\r\n        path,\r\n    ].join(\"/\");\r\n    return `https://${pathSegments}`;\r\n};\r\nexport const parse = (imageUrl) => {\r\n    const url = toUrl(imageUrl);\r\n    const matches = [...url.toString().matchAll(cloudflareRegex)];\r\n    if (!matches.length) {\r\n        throw new Error(\"Invalid Cloudflare URL\");\r\n    }\r\n    const group = matches[0].groups || {};\r\n    const { transformations: transformString, ...baseParams } = group;\r\n    const { width, height, f, ...transformations } = parseTransforms(transformString);\r\n    const base = formatUrl({ ...baseParams, transformations });\r\n    return {\r\n        base: url.toString(),\r\n        width: Number(width) || undefined,\r\n        height: Number(height) || undefined,\r\n        format: f,\r\n        cdn: \"cloudflare\",\r\n        params: { ...group, transformations },\r\n    };\r\n};\r\nexport const generate = ({ base, width, height, format, params }) => {\r\n    const parsed = parse(base.toString());\r\n    const props = {\r\n        transformations: {},\r\n        ...parsed.params,\r\n        ...params,\r\n    };\r\n    if (width) {\r\n        props.transformations.width = width?.toString();\r\n    }\r\n    if (height) {\r\n        props.transformations.height = height?.toString();\r\n    }\r\n    if (format) {\r\n        props.transformations.f = format === \"jpg\" ? \"jpeg\" : format;\r\n    }\r\n    props.transformations.fit ||= \"cover\";\r\n    return new URL(formatUrl(props));\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format = \"auto\" }) => {\r\n    const parsed = parse(originalUrl);\r\n    if (!parsed) {\r\n        throw new Error(\"Invalid Cloudflare URL\");\r\n    }\r\n    const props = {\r\n        ...parsed,\r\n        width,\r\n        height,\r\n        format,\r\n    };\r\n    return generate(props);\r\n};\r\n", "import { getNumericParam, setParamIfDefined, setParamIfUndefined, toUrl, } from \"../utils.js\";\r\nexport const parse = (url) => {\r\n    const parsedUrl = toUrl(url);\r\n    const width = getNumericParam(parsedUrl, \"width\");\r\n    const height = getNumericParam(parsedUrl, \"height\");\r\n    const params = {};\r\n    parsedUrl.searchParams.forEach((value, key) => {\r\n        params[key] = value;\r\n    });\r\n    parsedUrl.search = \"\";\r\n    return {\r\n        width,\r\n        height,\r\n        base: parsedUrl.toString(),\r\n        params,\r\n        cdn: \"bunny\",\r\n    };\r\n};\r\nexport const transform = ({ url: originalUrl, width, height }) => {\r\n    const url = toUrl(originalUrl);\r\n    setParamIfDefined(url, \"width\", width, true, true);\r\n    if (width && height) {\r\n        setParamIfUndefined(url, \"aspect_ratio\", `${width}:${height}`);\r\n    }\r\n    return url;\r\n};\r\n", "import { toUrl } from \"../utils.js\";\r\nconst storyBlokAssets = /(?<id>\\/f\\/\\d+\\/\\d+x\\d+\\/\\w+\\/[^\\/]+)\\/?(?<modifiers>m\\/?(?<crop>\\d+x\\d+:\\d+x\\d+)?\\/?(?<resize>(?<flipx>\\-)?(?<width>\\d+)x(?<flipy>\\-)?(?<height>\\d+))?\\/?(filters\\:(?<filters>[^\\/]+))?)?$/g;\r\nconst storyBlokImg2 = /^(?<modifiers>\\/(?<crop>\\d+x\\d+:\\d+x\\d+)?\\/?(?<resize>(?<flipx>\\-)?(?<width>\\d+)x(?<flipy>\\-)?(?<height>\\d+))?\\/?(filters\\:(?<filters>[^\\/]+))?\\/?)?(?<id>\\/f\\/.+)$/g;\r\nexport const splitFilters = (filters) => {\r\n    if (!filters) {\r\n        return {};\r\n    }\r\n    return Object.fromEntries(filters.split(\":\").map((filter) => {\r\n        if (!filter)\r\n            return [];\r\n        const [key, value] = filter.split(\"(\");\r\n        return [key, value.replace(\")\", \"\")];\r\n    }));\r\n};\r\nexport const generateFilters = (filters) => {\r\n    if (!filters) {\r\n        return undefined;\r\n    }\r\n    const filterItems = Object.entries(filters).map(([key, value]) => `${key}(${value ?? \"\"})`);\r\n    if (filterItems.length === 0) {\r\n        return undefined;\r\n    }\r\n    return `filters:${filterItems.join(\":\")}`;\r\n};\r\nexport const parse = (imageUrl) => {\r\n    const url = toUrl(imageUrl);\r\n    // img2.storyblok.com is the old domain for Storyblok images, which used a\r\n    // different path format. We'll assume custom domains are using the new format.\r\n    const regex = url.hostname === \"img2.storyblok.com\"\r\n        ? storyBlokImg2\r\n        : storyBlokAssets;\r\n    const [matches] = url.pathname.matchAll(regex);\r\n    if (!matches || !matches.groups) {\r\n        throw new Error(\"Invalid Storyblok URL\");\r\n    }\r\n    const { id, crop, width, height, filters, flipx, flipy } = matches.groups;\r\n    const { format, ...filterMap } = splitFilters(filters);\r\n    // We update old img2.storyblok.com URLs to use the new syntax and domain\r\n    if (url.hostname === \"img2.storyblok.com\") {\r\n        url.hostname = \"a.storyblok.com\";\r\n    }\r\n    return {\r\n        base: url.origin + id,\r\n        width: Number(width) || undefined,\r\n        height: Number(height) || undefined,\r\n        format,\r\n        params: {\r\n            crop,\r\n            filters: filterMap,\r\n            flipx: flipx,\r\n            flipy: flipy,\r\n        },\r\n        cdn: \"storyblok\",\r\n    };\r\n};\r\nexport const generate = ({ base, width = 0, height = 0, format, params = {} }) => {\r\n    const { crop, filters, flipx = \"\", flipy = \"\" } = params;\r\n    const size = `${flipx}${width}x${flipy}${height}`;\r\n    return new URL([base, \"m\", crop, size, generateFilters(filters), format].filter(Boolean).join(\"/\"));\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const parsed = parse(originalUrl);\r\n    if (!parsed) {\r\n        return;\r\n    }\r\n    if (format) {\r\n        if (!parsed.params) {\r\n            parsed.params = { filters: {} };\r\n        }\r\n        if (!parsed.params.filters) {\r\n            parsed.params.filters = {};\r\n        }\r\n        parsed.params.filters.format = format;\r\n    }\r\n    return generate({\r\n        ...parsed,\r\n        width,\r\n        height,\r\n    });\r\n};\r\n", "import { getNumericParam, setParamIfDefined, setParamIfUndefined, toUrl, } from \"../utils.js\";\r\nexport const parse = (url) => {\r\n    const parsedUrl = toUrl(url);\r\n    const fit = parsedUrl.searchParams.get(\"fit\") || undefined;\r\n    const width = getNumericParam(parsedUrl, \"w\");\r\n    const height = getNumericParam(parsedUrl, \"h\");\r\n    const quality = getNumericParam(parsedUrl, \"q\");\r\n    const format = parsedUrl.searchParams.get(\"fm\") || undefined;\r\n    parsedUrl.search = \"\";\r\n    return {\r\n        width,\r\n        height,\r\n        format,\r\n        base: parsedUrl.toString(),\r\n        params: { fit, quality },\r\n        cdn: \"kontent.ai\",\r\n    };\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const url = toUrl(originalUrl);\r\n    setParamIfDefined(url, \"w\", width, true, true);\r\n    setParamIfDefined(url, \"h\", height, true, true);\r\n    setParamIfDefined(url, \"fm\", format, true);\r\n    if (width && height) {\r\n        setParamIfUndefined(url, \"fit\", \"crop\");\r\n    }\r\n    return url;\r\n};\r\n", "import { setParamIfDefined, setParamIfUndefined, toCanonicalUrlString, toRelativeUrl, toUrl, } from \"../utils.js\";\r\nimport { getImageCdnForUrlByDomain } from \"../detect.js\";\r\nexport const parse = (url) => {\r\n    const parsed = toUrl(url);\r\n    const width = Number(parsed.searchParams.get(\"w\")) || undefined;\r\n    const quality = Number(parsed.searchParams.get(\"q\")) || undefined;\r\n    return {\r\n        base: parsed.toString(),\r\n        width,\r\n        quality,\r\n        cdn: \"vercel\",\r\n    };\r\n};\r\nexport const delegateUrl = (url) => {\r\n    const parsed = toUrl(url);\r\n    const source = parsed.searchParams.get(\"url\");\r\n    if (!source || !source.startsWith(\"http\")) {\r\n        return false;\r\n    }\r\n    const cdn = getImageCdnForUrlByDomain(source);\r\n    if (!cdn) {\r\n        return false;\r\n    }\r\n    return {\r\n        cdn,\r\n        url: source,\r\n    };\r\n};\r\nexport const generate = ({ base, width, params: { quality = 75, root = \"_vercel\" } = {} }) => {\r\n    // If the base is a relative URL, we need to add a dummy host to the URL\r\n    const url = new URL(\"http://n\");\r\n    url.pathname = `/${root}/image`;\r\n    url.searchParams.set(\"url\", base.toString());\r\n    setParamIfDefined(url, \"w\", width, false, true);\r\n    setParamIfUndefined(url, \"q\", quality);\r\n    return toRelativeUrl(url);\r\n};\r\nexport const transform = ({ url, width, cdn }) => {\r\n    // the URL might be relative, so we need to add a dummy host to it\r\n    const parsedUrl = toUrl(url);\r\n    const isNextImage = parsedUrl.pathname.startsWith(\"/_next/image\") ||\r\n        parsedUrl.pathname.startsWith(\"/_vercel/image\");\r\n    const src = isNextImage ? parsedUrl.searchParams.get(\"url\") : url.toString();\r\n    if (!src) {\r\n        return undefined;\r\n    }\r\n    setParamIfDefined(parsedUrl, \"w\", width, true, true);\r\n    if (isNextImage) {\r\n        return toCanonicalUrlString(parsedUrl);\r\n    }\r\n    return generate({\r\n        base: src,\r\n        width,\r\n        params: { root: cdn === \"nextjs\" ? \"_next\" : \"_vercel\" },\r\n    });\r\n};\r\n", "export { delegateUrl } from \"./vercel.js\";\r\nimport { parse as vercelParse, transform as vercelTransform, } from \"./vercel.js\";\r\nexport const parse = (url) => ({ ...vercelParse(url), cdn: \"nextjs\" });\r\nexport const transform = (params) => vercelTransform({ ...params, cdn: \"nextjs\" });\r\n", "import { getNumericParam, setParamIfDefined, setParamIfUndefined, toUrl, } from \"../utils.js\";\r\nexport const parse = (url) => {\r\n    const parsedUrl = toUrl(url);\r\n    const fit = parsedUrl.searchParams.get(\"fit\") || undefined;\r\n    const width = getNumericParam(parsedUrl, \"wid\");\r\n    const height = getNumericParam(parsedUrl, \"hei\");\r\n    const quality = getNumericParam(parsedUrl, \"qlt\") || undefined;\r\n    const format = parsedUrl.searchParams.get(\"fmt\") || undefined;\r\n    const scale = getNumericParam(parsedUrl, \"scl\") || undefined;\r\n    return {\r\n        width,\r\n        height,\r\n        format,\r\n        base: parsedUrl.toString(),\r\n        params: { fit, quality, scale },\r\n        cdn: \"scene7\",\r\n    };\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const url = toUrl(originalUrl);\r\n    setParamIfDefined(url, \"wid\", width, true, true);\r\n    setParamIfDefined(url, \"hei\", height, true, true);\r\n    setParamIfDefined(url, \"fmt\", format, true);\r\n    setParamIfDefined(url, \"qlt\", getNumericParam(url, \"qlt\"), true);\r\n    setParamIfDefined(url, \"scl\", getNumericParam(url, \"scl\"), true);\r\n    setParamIfUndefined(url, \"fit\", \"crop\");\r\n    if (!width && !height) {\r\n        setParamIfUndefined(url, \"scl\", 1);\r\n    }\r\n    return url;\r\n};\r\n", "import { getNumericParam, setParamIfDefined, setParamIfUndefined, toUrl, } from \"../utils.js\";\r\nexport const parse = (url) => {\r\n    const parsedUrl = toUrl(url);\r\n    const width = getNumericParam(parsedUrl, \"width\");\r\n    const height = getNumericParam(parsedUrl, \"height\");\r\n    const format = parsedUrl.searchParams.get(\"format\") || undefined;\r\n    const quality = getNumericParam(parsedUrl, \"quality\") || undefined;\r\n    return {\r\n        width,\r\n        height,\r\n        format,\r\n        base: parsedUrl.toString(),\r\n        params: { quality },\r\n        cdn: \"keycdn\",\r\n    };\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const url = toUrl(originalUrl);\r\n    setParamIfDefined(url, \"width\", width, true, true);\r\n    setParamIfDefined(url, \"height\", height, true, true);\r\n    setParamIfDefined(url, \"format\", format, true);\r\n    setParamIfDefined(url, \"quality\", getNumericParam(url, \"quality\"), true);\r\n    setParamIfUndefined(url, \"enlarge\", 0);\r\n    return url;\r\n};\r\n", "import { getNumericParam, setParamIfDefined, toUrl } from \"../utils.js\";\r\nexport const parse = (imageUrl) => {\r\n    const parsedUrl = toUrl(imageUrl);\r\n    const width = getNumericParam(parsedUrl, \"width\");\r\n    const height = getNumericParam(parsedUrl, \"height\");\r\n    const format = parsedUrl.searchParams.get(\"format\") || undefined;\r\n    const quality = getNumericParam(parsedUrl, \"quality\") || undefined;\r\n    let fit = parsedUrl.searchParams.get(\"fit\") ||\r\n        undefined;\r\n    const withoutEnlargement = parsedUrl.searchParams.get(\"withoutEnlargement\") === \"true\" || undefined;\r\n    const transforms = parsedUrl.searchParams.get(\"transforms\") || undefined;\r\n    // if fit doesn't satisfy the type, it will be undefined\r\n    if (fit && ![\"cover\", \"contain\", \"inside\", \"outside\"].includes(fit)) {\r\n        fit = undefined;\r\n    }\r\n    return {\r\n        width,\r\n        height,\r\n        format,\r\n        base: parsedUrl.toString(),\r\n        params: {\r\n            fit,\r\n            quality,\r\n            withoutEnlargement,\r\n            transforms: transforms ? JSON.parse(transforms) : undefined,\r\n        },\r\n        cdn: \"directus\",\r\n    };\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const url = toUrl(originalUrl);\r\n    setParamIfDefined(url, \"width\", width, true, true);\r\n    setParamIfDefined(url, \"height\", height, true, true);\r\n    setParamIfDefined(url, \"format\", format);\r\n    setParamIfDefined(url, \"quality\", getNumericParam(url, \"quality\"), true);\r\n    return url;\r\n};\r\n", "import { toUrl } from \"../utils.js\";\r\nexport const OBJECT_TO_DIRECTIVES_MAP = {\r\n    width: \"w\",\r\n    height: \"h\",\r\n    autoWidthWithFallback: \"w_auto\",\r\n    auto_width_fallback: \"w_auto\",\r\n    scaleToScreenWidth: \"pc\",\r\n    scale_to_screen_width: \"pc\",\r\n    crop: \"cr\",\r\n    outputFormat: \"f\",\r\n    format: \"f\",\r\n    fit: \"m\",\r\n    fitMethod: \"m\",\r\n    compression: \"cmpr\",\r\n    sharpness: \"s\",\r\n    rotate: \"r\",\r\n    inline: \"in\",\r\n    keepMeta: \"meta\",\r\n    keep_meta: \"meta\",\r\n    noOptimization: \"pass\",\r\n    no_optimization: \"pass\",\r\n    force_download: \"dl\",\r\n    max_device_pixel_ratio: \"maxdpr\",\r\n    maxDevicePixelRatio: \"maxdpr\",\r\n};\r\nexport const parse = (imageUrl) => {\r\n    const parsedUrl = toUrl(imageUrl);\r\n    const paramArray = getParameterArray(parsedUrl);\r\n    const baseUrl = getBaseUrl(parsedUrl);\r\n    let width = undefined, height = undefined, format = undefined;\r\n    const params = {};\r\n    if (paramArray.length > 0) {\r\n        paramArray.forEach((para) => {\r\n            let key_value = para.split(\"_\");\r\n            if (key_value.length > 1) {\r\n                switch (key_value[0]) {\r\n                    case \"w\":\r\n                        width = Number(key_value[1]);\r\n                        break;\r\n                    case \"h\":\r\n                        height = Number(key_value[1]);\r\n                        break;\r\n                    case \"f\":\r\n                        format = key_value[1];\r\n                        break;\r\n                    default:\r\n                        if (Object.values(OBJECT_TO_DIRECTIVES_MAP).includes(key_value[0])) {\r\n                            let directive = getDirective(key_value[0]);\r\n                            params[directive] = key_value[1];\r\n                        }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return {\r\n        base: baseUrl,\r\n        width,\r\n        height,\r\n        format,\r\n        params,\r\n        cdn: \"imageengine\",\r\n    };\r\n};\r\nexport function getDirective(key) {\r\n    let keyArray = Object.keys(OBJECT_TO_DIRECTIVES_MAP);\r\n    let directive = keyArray.find((k) => OBJECT_TO_DIRECTIVES_MAP[k] === key) ||\r\n        \"\";\r\n    return directive;\r\n}\r\nexport function getParameterArray(url) {\r\n    let url_string = url.toString();\r\n    let paramArray = [];\r\n    if (url_string) {\r\n        let splitURL = url_string.split(\"imgeng=\");\r\n        if (splitURL.length > 1) {\r\n            paramArray = splitURL[1].split(\"/\");\r\n        }\r\n    }\r\n    return paramArray;\r\n}\r\nexport function getBaseUrl(url) {\r\n    let url_string = url.toString();\r\n    let baseUrl = \"\";\r\n    if (url_string) {\r\n        let splitURL = url_string.split(\"imgeng=\");\r\n        if (splitURL.length > 1) {\r\n            baseUrl = splitURL[0].slice(0, -1);\r\n        }\r\n        else {\r\n            baseUrl = url_string;\r\n        }\r\n    }\r\n    return baseUrl;\r\n}\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const url = toUrl(originalUrl);\r\n    const src = getBaseUrl(url);\r\n    let directives = {};\r\n    const param = url.toString() === src ? [] : getParameterArray(url);\r\n    if (param.length) {\r\n        directives = getDirectives(param);\r\n    }\r\n    if (width) {\r\n        directives[\"width\"] = width;\r\n    }\r\n    if (height) {\r\n        directives[\"height\"] = height;\r\n    }\r\n    if (format) {\r\n        directives[\"format\"] = format;\r\n    }\r\n    if (!directives.hasOwnProperty(\"fit\")) {\r\n        directives = { ...directives, \"fit\": \"cropbox\" };\r\n    }\r\n    let directives_string = build_IE_directives(directives);\r\n    let query_string = build_IE_query_string(directives_string);\r\n    let query_prefix = query_string === \"\" ? \"\" : (src.includes(\"?\") ? \"&\" : \"?\");\r\n    return `${src}${query_prefix}${query_string}`;\r\n};\r\nexport function build_IE_directives(directives) {\r\n    return Object.entries(directives).reduce((acc, [k, v]) => {\r\n        return acc + maybe_create_directive(k, v);\r\n    }, \"\");\r\n}\r\nexport function build_IE_query_string(directives_string) {\r\n    if (directives_string && directives_string !== \"\") {\r\n        return `imgeng=${directives_string}`;\r\n    }\r\n    return \"\";\r\n}\r\nexport function maybe_create_directive(directive, value) {\r\n    let translated_directive = OBJECT_TO_DIRECTIVES_MAP[directive];\r\n    if (translated_directive && (value || value === 0)) {\r\n        return `/${translated_directive}_${value}`;\r\n    }\r\n    return \"\";\r\n}\r\nexport function getDirectives(paramArray) {\r\n    let directives = {};\r\n    paramArray.forEach((para) => {\r\n        let keyValue = para.split(\"_\");\r\n        if (keyValue.length > 1) {\r\n            let key = keyValue[0];\r\n            let value = keyValue[1];\r\n            let directiveKey = getDirective(key);\r\n            if (directiveKey) {\r\n                directives[directiveKey] = value;\r\n            }\r\n        }\r\n    });\r\n    return directives;\r\n}\r\n", "import { getNumericParam, setParamIfDefined, setParamIfUndefined, toUrl, } from \"../utils.js\";\r\nexport const parse = (url) => {\r\n    const parsedUrl = toUrl(url);\r\n    const fit = parsedUrl.searchParams.get(\"fit\") || undefined;\r\n    const width = getNumericParam(parsedUrl, \"width\");\r\n    const height = getNumericParam(parsedUrl, \"height\");\r\n    const quality = getNumericParam(parsedUrl, \"quality\");\r\n    const format = parsedUrl.searchParams.get(\"format\") || undefined;\r\n    parsedUrl.search = \"\";\r\n    return {\r\n        width,\r\n        height,\r\n        format,\r\n        base: parsedUrl.toString(),\r\n        params: { fit, quality },\r\n        cdn: \"contentstack\",\r\n    };\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const url = toUrl(originalUrl);\r\n    setParamIfDefined(url, \"width\", width, true, true);\r\n    setParamIfDefined(url, \"height\", height, true, true);\r\n    setParamIfDefined(url, \"format\", format);\r\n    if (!url.searchParams.has(\"format\")) {\r\n        setParamIfUndefined(url, \"auto\", \"webp\");\r\n    }\r\n    if (width && height) {\r\n        setParamIfUndefined(url, \"fit\", \"crop\");\r\n    }\r\n    return url;\r\n};\r\n", "import { toUrl } from \"../utils.js\";\r\nconst cloudflareImagesRegex = /https?:\\/\\/(?<host>[^\\/]+)\\/cdn-cgi\\/imagedelivery\\/(?<accountHash>[^\\/]+)\\/(?<imageId>[^\\/]+)\\/*(?<transformations>[^\\/]+)*$/g;\r\nconst parseTransforms = (transformations) => Object.fromEntries(transformations?.split(\",\")?.map((t) => t.split(\"=\")) ?? []);\r\nconst formatUrl = ({ host, accountHash, transformations = {}, imageId, }) => {\r\n    const transformString = Object.entries(transformations).map(([key, value]) => `${key}=${value}`).join(\",\");\r\n    const pathSegments = [\r\n        host,\r\n        \"cdn-cgi\",\r\n        \"imagedelivery\",\r\n        accountHash,\r\n        imageId,\r\n        transformString,\r\n    ].join(\"/\");\r\n    return `https://${pathSegments}`;\r\n};\r\nexport const parse = (imageUrl) => {\r\n    const url = toUrl(imageUrl);\r\n    const matches = [...url.toString().matchAll(cloudflareImagesRegex)];\r\n    if (!matches.length) {\r\n        throw new Error(\"Invalid Cloudflare Images URL\");\r\n    }\r\n    const group = matches[0].groups || {};\r\n    const { transformations: transformString, ...baseParams } = group;\r\n    const { w, h, f, ...transformations } = parseTransforms(transformString);\r\n    return {\r\n        base: url.toString(),\r\n        width: Number(w) || undefined,\r\n        height: Number(h) || undefined,\r\n        format: f,\r\n        cdn: \"cloudflare_images\",\r\n        params: { ...baseParams, transformations },\r\n    };\r\n};\r\nexport const generate = ({ base, width, height, format, params }) => {\r\n    const parsed = parse(base.toString());\r\n    const props = {\r\n        transformations: {},\r\n        ...parsed.params,\r\n        ...params,\r\n    };\r\n    if (width) {\r\n        props.transformations.w = width?.toString();\r\n    }\r\n    if (height) {\r\n        props.transformations.h = height?.toString();\r\n    }\r\n    if (format) {\r\n        props.transformations.f = format;\r\n    }\r\n    props.transformations.fit ||= \"cover\";\r\n    return new URL(formatUrl(props));\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format = \"auto\" }) => {\r\n    const parsed = parse(originalUrl);\r\n    if (!parsed) {\r\n        throw new Error(\"Invalid Cloudflare Images URL\");\r\n    }\r\n    const props = {\r\n        ...parsed,\r\n        width,\r\n        height,\r\n        format,\r\n    };\r\n    return generate(props);\r\n};\r\n", "import { toUrl } from \"../utils.js\";\r\n/**\r\n * Parses the CDN/server's native URL format\r\n */\r\nexport const parse = (imageUrl) => {\r\n    const url = toUrl(imageUrl);\r\n    const [modifiers, ...id] = url.pathname.split(\"/\").slice(1);\r\n    const params = Object.fromEntries(modifiers.split(\",\").map((modifier) => {\r\n        const [key, value] = modifier.split(\"_\");\r\n        return [key, value];\r\n    }));\r\n    if (params.s) {\r\n        const [width, height] = params.s.split(\"x\");\r\n        params.w ||= width;\r\n        params.h ||= height;\r\n    }\r\n    return {\r\n        base: id.join(\"/\"),\r\n        width: Number(params.w) || undefined,\r\n        height: Number(params.h) || undefined,\r\n        quality: Number(params.q) || undefined,\r\n        format: params.f || \"auto\",\r\n        params,\r\n        cdn: \"ipx\",\r\n    };\r\n};\r\nexport const generate = ({ base: id, width, height, format, params }) => {\r\n    const modifiers = params?.modifiers ?? {};\r\n    if (width && height) {\r\n        modifiers.s = `${width}x${height}`;\r\n    }\r\n    else if (width) {\r\n        modifiers.w = `${width}`;\r\n    }\r\n    else if (height) {\r\n        modifiers.h = `${height}`;\r\n    }\r\n    if (format) {\r\n        modifiers.f = format;\r\n    }\r\n    const base = params?.base.endsWith(\"/\") ? params?.base : `${params?.base}/`;\r\n    const modifiersString = Object.entries(modifiers).map(([key, value]) => `${key}_${value}`).join(\",\");\r\n    const stringId = id.toString();\r\n    const image = stringId.startsWith(\"/\") ? stringId.slice(1) : stringId;\r\n    return `${base}${modifiersString}/${image}`;\r\n};\r\nexport const transform = (options) => {\r\n    const url = String(options.url);\r\n    const parsedUrl = toUrl(url);\r\n    const defaultBase = (parsedUrl.pathname.startsWith(\"/_ipx\") && parsedUrl.hostname !== \"n\")\r\n        ? `${parsedUrl.origin}/_ipx`\r\n        : \"/_ipx\";\r\n    const base = options.cdnOptions?.ipx?.base ?? defaultBase;\r\n    const isIpxUrl = base && base !== \"/\" && url.startsWith(base);\r\n    if (isIpxUrl) {\r\n        const parsed = parse(url.replace(base, \"\"));\r\n        return generate({\r\n            ...parsed,\r\n            ...options,\r\n            params: {\r\n                ...options.cdnOptions?.ipx,\r\n                base,\r\n            },\r\n        });\r\n    }\r\n    return generate({\r\n        ...options,\r\n        base: url,\r\n        params: {\r\n            ...options.cdnOptions?.ipx,\r\n            base,\r\n        },\r\n    });\r\n};\r\n", "import { getNumericParam, setParamIfDefined, toCanonicalUrlString, toUrl, } from \"../utils.js\";\r\nimport { getImageCdnForUrlByDomain } from \"../detect.js\";\r\nexport const delegateUrl = (url) => {\r\n    const parsedUrl = toUrl(url);\r\n    const searchParamHref = parsedUrl.searchParams.get(\"href\");\r\n    const decodedHref = typeof searchParamHref === \"string\"\r\n        ? decodeURIComponent(searchParamHref)\r\n        : new URL(parsedUrl.pathname, parsedUrl.origin).toString();\r\n    const source = toCanonicalUrlString(toUrl(decodedHref));\r\n    if (!source || !source.startsWith(\"http\")) {\r\n        return false;\r\n    }\r\n    const cdn = getImageCdnForUrlByDomain(source);\r\n    if (!cdn) {\r\n        return false;\r\n    }\r\n    return {\r\n        cdn,\r\n        url: source,\r\n    };\r\n};\r\nexport const parse = (url) => {\r\n    const parsedUrl = toUrl(url);\r\n    const searchParamHref = parsedUrl.searchParams.get(\"href\");\r\n    const decodedHref = typeof searchParamHref === \"string\"\r\n        ? decodeURIComponent(searchParamHref)\r\n        : new URL(parsedUrl.pathname, parsedUrl.origin).toString();\r\n    const encodedHref = encodeURIComponent(toCanonicalUrlString(toUrl(decodedHref)));\r\n    const width = getNumericParam(parsedUrl, \"w\") || undefined;\r\n    const height = getNumericParam(parsedUrl, \"h\") || undefined;\r\n    const format = parsedUrl.searchParams.get(\"f\") || undefined;\r\n    const quality = parsedUrl.searchParams.get(\"q\") || undefined;\r\n    return {\r\n        width,\r\n        height,\r\n        format,\r\n        base: `/_image?href=${encodedHref}`,\r\n        params: { quality, href: encodedHref },\r\n        cdn: \"astro\",\r\n    };\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const parsedUrl = toUrl(originalUrl);\r\n    const href = toCanonicalUrlString(new URL(parsedUrl.pathname, parsedUrl.origin));\r\n    const url = { searchParams: new URLSearchParams() };\r\n    setParamIfDefined(url, \"href\", href, true, true);\r\n    setParamIfDefined(url, \"w\", width, true, true);\r\n    setParamIfDefined(url, \"h\", height, true, true);\r\n    setParamIfDefined(url, \"f\", format);\r\n    return `/_image?${url.searchParams.toString()}`;\r\n};\r\n", "import { setParamIfDefined, setParamIfUndefined, toCanonicalUrlString, toUrl, } from \"../utils.js\";\r\nconst skippedParams = new Set([\r\n    \"w\",\r\n    \"h\",\r\n    \"q\",\r\n    \"fm\",\r\n    \"url\",\r\n    \"width\",\r\n    \"height\",\r\n    \"quality\",\r\n]);\r\nexport const parse = (url) => {\r\n    const parsed = toUrl(url);\r\n    const width = Number(parsed.searchParams.get(\"w\") ?? parsed.searchParams.get(\"width\")) ??\r\n        undefined;\r\n    const height = Number(parsed.searchParams.get(\"h\") ?? parsed.searchParams.get(\"height\")) ??\r\n        undefined;\r\n    const quality = Number(parsed.searchParams.get(\"q\") ?? parsed.searchParams.get(\"quality\")) || undefined;\r\n    const format = parsed.searchParams.get(\"fm\") || undefined;\r\n    const base = parsed.searchParams.get(\"url\") || \"\";\r\n    const params = {\r\n        quality,\r\n    };\r\n    parsed.searchParams.forEach((value, key) => {\r\n        if (skippedParams.has(key)) {\r\n            return;\r\n        }\r\n        params[key] = value;\r\n    });\r\n    parsed.search = \"\";\r\n    return {\r\n        base,\r\n        width,\r\n        height,\r\n        format,\r\n        params,\r\n        cdn: \"netlify\",\r\n    };\r\n};\r\nexport const generate = ({ base, width, height, format, params: { site, quality, ...params } = {} }) => {\r\n    const url = toUrl(\"/.netlify/images\", site);\r\n    Object.entries(params).forEach(([key, value]) => setParamIfDefined(url, key, value));\r\n    setParamIfDefined(url, \"q\", quality, true, true);\r\n    setParamIfDefined(url, \"w\", width, true, true);\r\n    setParamIfDefined(url, \"h\", height, true, true);\r\n    setParamIfDefined(url, \"fm\", format);\r\n    setParamIfUndefined(url, \"fit\", \"cover\");\r\n    url.searchParams.set(\"url\", base.toString());\r\n    return toCanonicalUrlString(url);\r\n};\r\nexport const transform = (options) => {\r\n    const url = toUrl(options.url);\r\n    // If this is a Netlify image URL, we'll manipulate it rather than using it as the source image\r\n    if (url.pathname.startsWith(\"/.netlify/images\")) {\r\n        const { params, base, format } = parse(url);\r\n        return generate({\r\n            base,\r\n            format,\r\n            ...options,\r\n            params: {\r\n                ...params,\r\n                // If hostname is \"n\", we're dealing with a relative URL, so we don't need to set the site param\r\n                site: url.hostname === \"n\" ? undefined : url.origin,\r\n            },\r\n        });\r\n    }\r\n    return generate({\r\n        ...options,\r\n        base: options.url,\r\n        params: {\r\n            site: options.cdnOptions?.netlify?.site,\r\n        },\r\n    });\r\n};\r\n", "import { toUrl } from \"../utils.js\";\r\nconst getTransformParams = (url) => {\r\n    const transforms = url.searchParams.get(\"tr\") || \"\";\r\n    return transforms.split(\",\").reduce((acc, transform) => {\r\n        const [key, value] = transform.split(\"-\");\r\n        acc[key] = value;\r\n        return acc;\r\n    }, {});\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, format }) => {\r\n    const url = toUrl(originalUrl);\r\n    const transformParams = getTransformParams(url);\r\n    transformParams.w = width ? Math.round(width) : width;\r\n    transformParams.h = height ? Math.round(height) : height;\r\n    if (!transformParams.f) {\r\n        transformParams.f = \"auto\";\r\n    }\r\n    if (format) {\r\n        transformParams.f = format;\r\n    }\r\n    const tr = Object.keys(transformParams).map((key) => {\r\n        const value = transformParams[key];\r\n        if (value) {\r\n            return `${key}-${value}`;\r\n        }\r\n    })\r\n        .filter((x) => x)\r\n        .join(\",\");\r\n    url.searchParams.set(\"tr\", tr);\r\n    return url;\r\n};\r\nexport const parse = (url) => {\r\n    const parsed = toUrl(url);\r\n    const transformParams = getTransformParams(parsed);\r\n    const width = Number(transformParams.w) || undefined;\r\n    const height = Number(transformParams.h) || undefined;\r\n    const format = transformParams.f || undefined;\r\n    parsed.search = \"\";\r\n    return {\r\n        base: parsed.toString(),\r\n        width,\r\n        height,\r\n        format,\r\n        params: transformParams,\r\n        cdn: \"imagekit\",\r\n    };\r\n};\r\n", "import { toUrl } from \"../utils.js\";\r\nconst uploadcareRegex = /^https?:\\/\\/(?<host>[^\\/]+)\\/(?<uuid>[^\\/]+)/g;\r\n/**\r\n * Taken from uploadcare/blocks\r\n *\r\n * @see https://github.com/uploadcare/blocks/blob/87d1048e94f05f99e1da988c86c6362522e9a3c8/utils/cdn-utils.js#L57\r\n */\r\nexport function extractFilename(cdnUrl) {\r\n    const url = new URL(cdnUrl);\r\n    const noOrigin = url.pathname + url.search + url.hash;\r\n    const urlFilenameIdx = noOrigin.lastIndexOf(\"http\");\r\n    const plainFilenameIdx = noOrigin.lastIndexOf(\"/\");\r\n    let filename = \"\";\r\n    if (urlFilenameIdx >= 0) {\r\n        filename = noOrigin.slice(urlFilenameIdx);\r\n    }\r\n    else if (plainFilenameIdx >= 0) {\r\n        filename = noOrigin.slice(plainFilenameIdx + 1);\r\n    }\r\n    return filename;\r\n}\r\n/**\r\n * Taken from uploadcare/blocks\r\n *\r\n * @see https://github.com/uploadcare/blocks/blob/87d1048e94f05f99e1da988c86c6362522e9a3c8/utils/cdn-utils.js#L131\r\n */\r\nexport function isFileUrl(filename) {\r\n    return filename.startsWith(\"http\");\r\n}\r\n/**\r\n * Taken from uploadcare/blocks\r\n *\r\n * @see https://github.com/uploadcare/blocks/blob/87d1048e94f05f99e1da988c86c6362522e9a3c8/utils/cdn-utils.js#L141\r\n */\r\nexport function splitFileUrl(fileUrl) {\r\n    const url = new URL(fileUrl);\r\n    return {\r\n        pathname: url.origin + url.pathname || \"\",\r\n        search: url.search || \"\",\r\n        hash: url.hash || \"\",\r\n    };\r\n}\r\n/**\r\n * Taken from uploadcare/blocks\r\n *\r\n * @see https://github.com/uploadcare/blocks/blob/87d1048e94f05f99e1da988c86c6362522e9a3c8/utils/cdn-utils.js#L114\r\n */\r\nexport function trimFilename(cdnUrl) {\r\n    const url = new URL(cdnUrl);\r\n    const filename = extractFilename(cdnUrl);\r\n    const filenamePathPart = isFileUrl(filename)\r\n        ? splitFileUrl(filename).pathname\r\n        : filename;\r\n    url.pathname = url.pathname.replace(filenamePathPart, \"\");\r\n    url.search = \"\";\r\n    url.hash = \"\";\r\n    return url.toString();\r\n}\r\n/**\r\n * Taken from uploadcare/blocks\r\n *\r\n * @see https://github.com/uploadcare/blocks/blob/87d1048e94f05f99e1da988c86c6362522e9a3c8/utils/cdn-utils.js#L9C1-L24C3\r\n */\r\nexport const normalizeCdnOperation = (operation) => {\r\n    if (typeof operation !== \"string\" || !operation) {\r\n        return \"\";\r\n    }\r\n    let str = operation.trim();\r\n    if (str.startsWith(\"-/\")) {\r\n        str = str.slice(2);\r\n    }\r\n    else if (str.startsWith(\"/\")) {\r\n        str = str.slice(1);\r\n    }\r\n    if (str.endsWith(\"/\")) {\r\n        str = str.slice(0, str.length - 1);\r\n    }\r\n    return str;\r\n};\r\n/**\r\n * Taken from uploadcare/blocks\r\n *\r\n * @see https://github.com/uploadcare/blocks/blob/87d1048e94f05f99e1da988c86c6362522e9a3c8/utils/cdn-utils.js#L93C1-L106C2\r\n */\r\nexport function extractOperations(cdnUrl) {\r\n    const withoutFilename = trimFilename(cdnUrl);\r\n    const url = new URL(withoutFilename);\r\n    const operationsMarker = url.pathname.indexOf(\"/-/\");\r\n    if (operationsMarker === -1) {\r\n        return [];\r\n    }\r\n    const operationsStr = url.pathname.substring(operationsMarker);\r\n    return operationsStr\r\n        .split(\"/-/\")\r\n        .filter(Boolean)\r\n        .map((operation) => normalizeCdnOperation(operation));\r\n}\r\nconst parseOperations = (operations) => {\r\n    return operations.length\r\n        ? operations.reduce((acc, operation) => {\r\n            const [key, value] = operation.split(\"/\");\r\n            return {\r\n                ...acc,\r\n                [key]: value,\r\n            };\r\n        }, {})\r\n        : {};\r\n};\r\nconst formatUrl = ({ host, uuid, operations = {}, filename, }) => {\r\n    const operationString = Object.entries(operations).map(([key, value]) => `${key}/${value}`).join(\"/-/\");\r\n    const pathSegments = [\r\n        host,\r\n        uuid,\r\n        operationString ? `-/${operationString}` : \"\",\r\n        filename,\r\n    ].join(\"/\");\r\n    return `https://${pathSegments}`;\r\n};\r\nexport const parse = (imageUrl) => {\r\n    const url = toUrl(imageUrl);\r\n    const matchers = [...url.toString().matchAll(uploadcareRegex)];\r\n    if (!matchers.length) {\r\n        throw new Error(\"Invalid Uploadcare URL\");\r\n    }\r\n    const group = matchers[0].groups || {};\r\n    const { ...baseParams } = group;\r\n    const filename = extractFilename(url.toString());\r\n    const { format: f, ...operations } = parseOperations(extractOperations(url.toString()));\r\n    const format = (f && f !== \"auto\") ? f : \"auto\";\r\n    const base = formatUrl({\r\n        ...baseParams,\r\n        filename: filename || undefined,\r\n        operations: {\r\n            ...operations,\r\n            format,\r\n        },\r\n    });\r\n    return {\r\n        base,\r\n        cdn: \"uploadcare\",\r\n        params: {\r\n            ...group,\r\n            filename: filename || undefined,\r\n            operations: {\r\n                ...operations,\r\n                format,\r\n            },\r\n        },\r\n    };\r\n};\r\nexport const generate = ({ base, width, height, params, }) => {\r\n    const baseUrl = base.toString();\r\n    const parsed = parse(baseUrl.endsWith(\"/\") ? baseUrl : `${baseUrl}/`);\r\n    const props = {\r\n        operations: {},\r\n        ...parsed.params,\r\n        ...params,\r\n    };\r\n    if (width && height) {\r\n        props.operations = {\r\n            ...props.operations,\r\n            resize: `${width}x${height}`,\r\n        };\r\n    }\r\n    else {\r\n        if (width) {\r\n            props.operations = {\r\n                ...props.operations,\r\n                resize: `${width}x`,\r\n            };\r\n        }\r\n        if (height) {\r\n            props.operations = {\r\n                ...props.operations,\r\n                resize: `x${height}`,\r\n            };\r\n        }\r\n    }\r\n    return formatUrl(props);\r\n};\r\nexport const transform = ({ url: originalUrl, width, height, }) => {\r\n    const parsed = parse(originalUrl);\r\n    if (!parsed) {\r\n        throw new Error(\"Invalid Uploadcare URL\");\r\n    }\r\n    const props = {\r\n        ...parsed,\r\n        width,\r\n        height,\r\n    };\r\n    return generate(props);\r\n};\r\n", "import { roundIfNumeric, toUrl } from \"../utils.js\";\r\nconst ALLOWED_FORMATS = [\"origin\"];\r\nconst STORAGE_URL_PREFIX = \"/storage/v1/object/public/\";\r\nconst RENDER_URL_PREFIX = \"/storage/v1/render/image/public/\";\r\nconst isRenderUrl = (url) => url.pathname.startsWith(RENDER_URL_PREFIX);\r\nexport const parse = (imageUrl) => {\r\n    const url = toUrl(imageUrl);\r\n    const isRender = isRenderUrl(url);\r\n    if (!isRender) {\r\n        return {\r\n            cdn: \"supabase\",\r\n            base: url.origin + url.pathname,\r\n        };\r\n    }\r\n    const imagePath = url.pathname.replace(RENDER_URL_PREFIX, \"\");\r\n    const quality = url.searchParams.has(\"quality\")\r\n        ? Number(url.searchParams.get(\"quality\"))\r\n        : undefined;\r\n    const width = url.searchParams.has(\"width\")\r\n        ? Number(url.searchParams.get(\"width\"))\r\n        : undefined;\r\n    const height = url.searchParams.has(\"height\")\r\n        ? Number(url.searchParams.get(\"height\"))\r\n        : undefined;\r\n    const format = url.searchParams.has(\"format\")\r\n        ? url.searchParams.get(\"format\")\r\n        : undefined;\r\n    const resize = url.searchParams.has(\"resize\")\r\n        ? url.searchParams.get(\"resize\")\r\n        : undefined;\r\n    return {\r\n        cdn: \"supabase\",\r\n        base: url.origin + STORAGE_URL_PREFIX + imagePath,\r\n        width,\r\n        height,\r\n        format,\r\n        params: {\r\n            quality,\r\n            resize,\r\n        },\r\n    };\r\n};\r\nexport const generate = ({ base, width, height, format, params }) => {\r\n    const parsed = parse(base.toString());\r\n    base = parsed.base;\r\n    width = width || parsed.width;\r\n    height = height || parsed.height;\r\n    format = format || parsed.format;\r\n    params = { ...parsed.params, ...params };\r\n    const searchParams = new URLSearchParams();\r\n    if (width)\r\n        searchParams.set(\"width\", roundIfNumeric(width).toString());\r\n    if (height)\r\n        searchParams.set(\"height\", roundIfNumeric(height).toString());\r\n    if (format && ALLOWED_FORMATS.includes(format)) {\r\n        searchParams.set(\"format\", format);\r\n    }\r\n    if (params?.quality) {\r\n        searchParams.set(\"quality\", roundIfNumeric(params.quality).toString());\r\n    }\r\n    if (params?.resize)\r\n        searchParams.set(\"resize\", params.resize);\r\n    if (searchParams.toString() === \"\")\r\n        return base;\r\n    return parsed.base.replace(STORAGE_URL_PREFIX, RENDER_URL_PREFIX) + \"?\" +\r\n        searchParams.toString();\r\n};\r\nexport const transform = ({ url, width, height, format, cdnOptions }) => {\r\n    const parsed = parse(url);\r\n    return generate({\r\n        base: parsed.base,\r\n        width: width || parsed.width,\r\n        height: height || parsed.height,\r\n        format: format || parsed.format,\r\n        params: cdnOptions?.supabase || parsed.params,\r\n    });\r\n};\r\n", "import { getImageCdnForUrl } from \"./detect.js\";\r\nimport { delegateUrl as vercel } from \"./transformers/vercel.js\";\r\nimport { delegateUrl as nextjs } from \"./transformers/nextjs.js\";\r\n// Image servers that might delegate to another CDN\r\nconst delegators = {\r\n    vercel,\r\n    nextjs,\r\n};\r\nexport function getDelegatedCdn(url, cdn) {\r\n    // Most CDNs are authoritative for their own URLs\r\n    if (!(cdn in delegators)) {\r\n        return false;\r\n    }\r\n    const maybeDelegate = delegators[cdn];\r\n    if (!maybeDelegate) {\r\n        return false;\r\n    }\r\n    return maybeDelegate(url);\r\n}\r\n/**\r\n * Gets the canonical URL and CDN for a given image URL, recursing into\r\n * the source image if it is hosted on another CDN.\r\n */\r\nexport function getCanonicalCdnForUrl(url, defaultCdn) {\r\n    const cdn = getImageCdnForUrl(url) || defaultCdn;\r\n    if (!cdn) {\r\n        return false;\r\n    }\r\n    const maybeDelegated = getDelegatedCdn(url, cdn);\r\n    if (maybeDelegated) {\r\n        return maybeDelegated;\r\n    }\r\n    return { cdn, url };\r\n}\r\n", "import { getImageCdnForUrl } from \"./detect.js\";\r\nimport { transform as contentful } from \"./transformers/contentful.js\";\r\nimport { transform as builderio } from \"./transformers/builder.io.js\";\r\nimport { transform as imgix } from \"./transformers/imgix.js\";\r\nimport { transform as shopify } from \"./transformers/shopify.js\";\r\nimport { transform as wordpress } from \"./transformers/wordpress.js\";\r\nimport { transform as cloudimage } from \"./transformers/cloudimage.js\";\r\nimport { transform as cloudinary } from \"./transformers/cloudinary.js\";\r\nimport { transform as cloudflare } from \"./transformers/cloudflare.js\";\r\nimport { transform as bunny } from \"./transformers/bunny.js\";\r\nimport { transform as storyblok } from \"./transformers/storyblok.js\";\r\nimport { transform as kontentai } from \"./transformers/kontent.ai.js\";\r\nimport { transform as vercel } from \"./transformers/vercel.js\";\r\nimport { transform as nextjs } from \"./transformers/nextjs.js\";\r\nimport { transform as scene7 } from \"./transformers/scene7.js\";\r\nimport { transform as keycdn } from \"./transformers/keycdn.js\";\r\nimport { transform as directus } from \"./transformers/directus.js\";\r\nimport { transform as imageengine } from \"./transformers/imageengine.js\";\r\nimport { transform as contentstack } from \"./transformers/contentstack.js\";\r\nimport { transform as cloudflareImages } from \"./transformers/cloudflare_images.js\";\r\nimport { transform as ipx } from \"./transformers/ipx.js\";\r\nimport { transform as astro } from \"./transformers/astro.js\";\r\nimport { transform as netlify } from \"./transformers/netlify.js\";\r\nimport { transform as imagekit } from \"./transformers/imagekit.js\";\r\nimport { transform as uploadcare } from \"./transformers/uploadcare.js\";\r\nimport { transform as supabase } from \"./transformers/supabase.js\";\r\nimport { getCanonicalCdnForUrl } from \"./canonical.js\";\r\nexport const getTransformer = (cdn) => ({\r\n    imgix,\r\n    contentful,\r\n    \"builder.io\": builderio,\r\n    shopify,\r\n    wordpress,\r\n    cloudimage,\r\n    cloudinary,\r\n    bunny,\r\n    storyblok,\r\n    cloudflare,\r\n    vercel,\r\n    nextjs,\r\n    scene7,\r\n    \"kontent.ai\": kontentai,\r\n    keycdn,\r\n    directus,\r\n    imageengine,\r\n    contentstack,\r\n    \"cloudflare_images\": cloudflareImages,\r\n    ipx,\r\n    astro,\r\n    netlify,\r\n    imagekit,\r\n    uploadcare,\r\n    supabase,\r\n}[cdn]);\r\n/**\r\n * Returns a transformer function if the given CDN is supported\r\n */\r\nexport const getTransformerForCdn = (cdn) => {\r\n    if (!cdn) {\r\n        return undefined;\r\n    }\r\n    return getTransformer(cdn);\r\n};\r\n/**\r\n * Transforms an image URL to a new URL with the given options.\r\n * If the URL is not from a known image CDN it returns undefined.\r\n */\r\nexport const transformUrl = (options) => {\r\n    const cdn = options?.cdn ?? getImageCdnForUrl(options.url);\r\n    // Default to recursive\r\n    if (!(options.recursive ?? true)) {\r\n        return getTransformerForCdn(cdn)?.(options);\r\n    }\r\n    const canonical = getCanonicalCdnForUrl(options.url, cdn);\r\n    if (!canonical || !canonical.cdn) {\r\n        return undefined;\r\n    }\r\n    return getTransformer(canonical.cdn)?.({\r\n        ...options,\r\n        url: canonical.url,\r\n    });\r\n};\r\n/**\r\n * Returns a transformer function if the given URL is from a known image CDN\r\n *\r\n * @deprecated Use `getCanonicalCdnForUrl` and `getTransformerForCdn` instead\r\n */\r\nexport const getTransformerForUrl = (url) => getTransformerForCdn(getImageCdnForUrl(url));\r\n", "import { getImageCdnForUrl } from \"./detect.js\";\r\nimport { parse as contentful } from \"./transformers/contentful.js\";\r\nimport { parse as builder } from \"./transformers/builder.io.js\";\r\nimport { parse as imgix } from \"./transformers/imgix.js\";\r\nimport { parse as shopify } from \"./transformers/shopify.js\";\r\nimport { parse as wordpress } from \"./transformers/wordpress.js\";\r\nimport { parse as cloudimage } from \"./transformers/cloudimage.js\";\r\nimport { parse as cloudinary } from \"./transformers/cloudinary.js\";\r\nimport { parse as cloudflare } from \"./transformers/cloudflare.js\";\r\nimport { parse as bunny } from \"./transformers/bunny.js\";\r\nimport { parse as storyblok } from \"./transformers/storyblok.js\";\r\nimport { parse as kontentai } from \"./transformers/kontent.ai.js\";\r\nimport { parse as vercel } from \"./transformers/vercel.js\";\r\nimport { parse as nextjs } from \"./transformers/nextjs.js\";\r\nimport { parse as scene7 } from \"./transformers/scene7.js\";\r\nimport { parse as keycdn } from \"./transformers/keycdn.js\";\r\nimport { parse as directus } from \"./transformers/directus.js\";\r\nimport { parse as imageengine } from \"./transformers/imageengine.js\";\r\nimport { parse as contentstack } from \"./transformers/contentstack.js\";\r\nimport { parse as cloudflareImages } from \"./transformers/cloudflare_images.js\";\r\nimport { parse as ipx } from \"./transformers/ipx.js\";\r\nimport { parse as astro } from \"./transformers/astro.js\";\r\nimport { parse as netlify } from \"./transformers/netlify.js\";\r\nimport { parse as imagekit } from \"./transformers/imagekit.js\";\r\nimport { parse as uploadcare } from \"./transformers/uploadcare.js\";\r\nimport { parse as supabase } from \"./transformers/supabase.js\";\r\nexport const parsers = {\r\n    imgix,\r\n    contentful,\r\n    \"builder.io\": builder,\r\n    shopify,\r\n    wordpress,\r\n    cloudimage,\r\n    cloudinary,\r\n    cloudflare,\r\n    bunny,\r\n    storyblok,\r\n    \"kontent.ai\": kontentai,\r\n    vercel,\r\n    nextjs,\r\n    scene7,\r\n    keycdn,\r\n    directus,\r\n    imageengine,\r\n    contentstack,\r\n    \"cloudflare_images\": cloudflareImages,\r\n    ipx,\r\n    astro,\r\n    netlify,\r\n    imagekit,\r\n    uploadcare,\r\n    supabase,\r\n};\r\nexport const cdnIsSupportedForParse = (cdn) => cdn && cdn in parsers;\r\n/**\r\n * Returns a parser function if the given URL is from a known image CDN\r\n * @param url\r\n */\r\nexport const getParserForUrl = (url) => getParserForCdn(getImageCdnForUrl(url));\r\nexport const getParserForCdn = (cdn) => {\r\n    if (!cdn || !cdnIsSupportedForParse(cdn)) {\r\n        return undefined;\r\n    }\r\n    return parsers[cdn];\r\n};\r\n/**\r\n * Parses an image URL into its components.\r\n * If the URL is not from a known image CDN it returns undefined.\r\n * @param url\r\n */\r\nexport const parseUrl = (url, cdn) => {\r\n    if (cdn) {\r\n        return getParserForCdn(cdn)?.(url);\r\n    }\r\n    const detectedCdn = getImageCdnForUrl(url);\r\n    if (!detectedCdn) {\r\n        return undefined;\r\n    }\r\n    if (!cdnIsSupportedForParse(detectedCdn)) {\r\n        return { cdn: detectedCdn, base: url.toString() };\r\n    }\r\n    return getParserForCdn(detectedCdn)?.(url);\r\n};\r\n"],
  "mappings": "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",
  "names": ["parse", "transform", "parse", "transform", "parse", "transform", "transform", "parse", "parse", "transform", "parse", "generate", "transform", "parseTransforms", "formatUrl", "parse", "generate", "transform", "parse", "transform", "parse", "generate", "transform", "parse", "transform", "parse", "generate", "transform", "parse", "transform", "parse", "transform", "parse", "transform", "parse", "transform", "parse", "transform", "parse", "transform", "parseTransforms", "formatUrl", "parse", "generate", "transform", "parse", "generate", "transform", "parse", "transform", "parse", "generate", "transform", "transform", "parse", "formatUrl", "parse", "generate", "transform", "parse", "generate", "transform", "transform", "parse"]
}
